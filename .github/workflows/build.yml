name: Build and Deploy Minecraft Structure Generator

on:
  push:
    branches:
      - main  # Trigger pada push ke branch main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Trigger pada tag versi (misalnya, v1.0.0)

env:
  DOCKER_CACHE_PATH: docker_cache.tar  # Path untuk cache Docker image

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: yarn

      - name: Install dependencies
        run: npm install -g yarn@latest

      - name: Create Docker cache file
        run: |
          # Perintah Anda untuk membuat atau mengunduh docker_cache.tar
          echo "Creating docker_cache.tar"
          touch docker_cache.tar  # Ganti ini dengan perintah yang sebenarnya

      - name: Check Docker cache file
        run: |
          if [ -f "${DOCKER_CACHE_PATH}" ]; then
            echo "Cache file exists."
          else
            echo "Cache file does not exist."
          fi
        env:
          DOCKER_CACHE_PATH: docker_cache.tar

      - name: Load Docker cache
        run: docker load -i ${DOCKER_CACHE_PATH}
        env:
          DOCKER_CACHE_PATH: docker_cache.tar
          
  build:
    runs-on: ubuntu-latest
    if: github.ref_type != 'tag'  # Hanya jalankan jika bukan tag
    needs: [docker]  # Tunggu job docker selesai
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive  # Jika menggunakan submodule

      - name: Upgrade Yarn
        run: npm install -g yarn@latest

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version  # Gunakan versi Node.js dari file .node-version
          cache: 'yarn'  # Cache dependensi yarn

      - name: Debug cache
        run: |
          ls -la
          if [ -f "${DOCKER_CACHE_PATH}" ]; then
            echo "Cache file exists."
          else
            echo "Cache file does not exist."
          fi

      - name: Restore Docker image
        run: docker load -i ${DOCKER_CACHE_PATH}

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build  # Jalankan script build dari package.json

  deploy:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'  # Hanya jalankan jika ada tag
    needs: [docker]  # Tunggu job docker selesai
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Upgrade Yarn
        run: npm install -g yarn@latest

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: 'yarn'

      - name: Debug cache
        run: |
          ls -la
          if [ -f "${DOCKER_CACHE_PATH}" ]; then
            echo "Cache file exists."
          else
            echo "Cache file does not exist."
          fi

      - name: Restore Docker image
        run: docker load -i ${DOCKER_CACHE_PATH}

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build  # Jalankan script build dari package.json

      - uses: actions/upload-pages-artifact@v3
        with:
          path: './public'  # Folder output build (sesuaikan dengan proyek Anda)

      - uses: actions/deploy-pages@v4
